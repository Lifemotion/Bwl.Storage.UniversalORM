Модуль для храниния и оперирования данными в хранилище.

1) Основной класс - Bwl.Storage.UniversalORM.LocalStorage
- Отвечает за сохранение всех данных объекта в хранилище

1.1) LocalStorage содержит менеджер JSON хранилищь
- основные интерфейсы и базовые классы JSON хранилищь описаны в проекте Bwl.Storage.UniversalORM
- текстовые поля и данные простых типов преобразуются в JSON представление
- для каждого типа в LocalStorage создается отдельное JSON хранилище
- у каждого типа поля помечаются аттрибутами
	-- либо чтобы пометить их как индексируемые (нужно для поиска)
	-- либо чтобы пометить их для игнорирования (не входят в JSON представление)
-  есть несколько реализаций JSON хранилищ:
	-- файловая система (проект Bwl.Storage.UniversalORM.Files)
		--- индексирование и поиск работают нестабильно из-за отсутствия блокировок
	-- SQLServer (проект Bwl.Storage.UniversalORM.AdoDb)
	-- Firebird (проект Bwl.Storage.UniversalORM.Firebird)

1.2) LocalStorage содержит хранилище BLOB данных
- проект с классами BLOB хранилища Bwl.Storage.UniversalORM.Blob 
- поля с большими бинарными объектами у типа помечаются как BLOB и сохраняются отдельно от JSON данных в спец. хранилище BLOB полей
- хранилище BLOB полей - CommonBlobStorage
	-- оно содержит 
		--- список преобразователей IBlobBinarySaver
			---- преобразователи BLOB полей в байтовые массивы 
			---- есть для массива байтов и для Битмап
		--- реальное хранилище блоб данных IBlobSaver
			---- сохраняет байтовые массивы всех БЛОБ полей объекта в реальное хранилище
			---- есть реализации для Памяти и для Файловой системы
	
Следующие действия проиходят в LocalStorage:
1) при сохранении объекта типа T в хранилище
- Сохранение JSON представления
	-- для типа Т создается реальное хранилище JSON (или используется ранее созданное)
	-- объект преобразуется в JSON представление 
	-- формуются данные для индексов
	-- JSON и индексы сохраняются в реальное JSON хранилище для типа T по ID объекта
- Сохранение БЛОБ полей
	-- все блоб поля объекта преобразуются в байтовые массивы
	-- все байтовые массивы сохраняются в реальное БЛОБ хранилище по ID объекта

2) при загрузке объекта типа T из хранилища
- загрузка JSON данных
	-- для типа Т создается реальное хранилище JSON (или используется ранее созданное)
	-- из реального хранилища JSON загружается JSON представление 
	-- JSON представление преобразуется в реальный объект типа Т
- загрузка БЛОБ полей
	-- после создания объекта из JSON представления БЛОБ поля пустые
	-- из БЛОБ хранилища загружаются байтовые массивы по ID объекта
	-- из байтовых массивов создаются объекты, которые помещаются в БЛОБ поля 
- итоговы объект со всемми заполненными полями возвращается наружу
3) при поиске объекта типа Т в хранилище
- для типа Т создается реальное хранилище JSON (или используется ранее созданное)
- в данном хранилище ищется в нужном индексе данные
- возрвращается список ID объектов, удовлетворяющим поисковому запросу



2)большие бинарные объекты с